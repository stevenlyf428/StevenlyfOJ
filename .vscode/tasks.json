{
    "version": "2.0.0",
    "tasks": [
        // {
        //     "label": "Build C++ project",
        //     "type": "shell",
        //     "group": {
        //         "kind": "build",
        //         "isDefault": true
        //     },
        //     "command": "g++",
        //     // "args": [
        //     //     //"-g",    // 生成和调试有关的信息
        //     //     "${file}",
        //     //     "-std=c11",
        //     //     "-stdlib=libc++",
        //     //     "-o", // 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out
        //     //     "${fileDirname}/${fileBasenameNoExtension}.out",
        //     //     "--debug"
        //     //     //"-Wall", // 开启额外警告
        //     //     //"-static-libgcc",     // 静态链接libgcc，一般都会加上
        //     //     //"-fexec-charset=GBK", // 生成的程序使用GBK编码，不加这一条会导致Win下输出中文乱码
        //     //     // C++最新标准为c++17，或根据自己的需要进行修改
        //     // ], // 编译的命令，其实相当于VSC帮你在终端中输了这些东西
        //     // "presentation": {
        //     //     "echo": true,
        //     //     "reveal": "always", // 执行任务时是否跳转到终端面板，可以为always，silent，never。具体参见VSC的文档
        //     //     "focus": false, // 设为true后可以使执行task时焦点聚集在终端，但对编译C/C++来说，设为true没有意义
        //     //     "panel": "shared" // 不同的文件的编译信息共享一个终端面板
        //     // }
        // },
        // {
        //     "label": "Build & run C++ project",
        //     "type": "shell", //任务的类型，有两种（shell/process），shell的意思相当于先打开shell再输入命令，process是直接运行命令
        //     // "group": {
        //     //     "kind": "build",
        //     //     "isDefault": true
        //     // },
        //     "command": "g++",
        //     "args": [
        //         "${file}",
        //         // "-o",
        //         // "${fileDirname}/${fileBasenameNoExtension}.out",
        //         // "-g"
        //     ]
        // }
        {
            "label": "Build with Clang", //这个任务的名字在launch.json最后一项配置
            "type": "shell",
            "command": "clang++",
            "args": [
                "-std=c++17",
                "-stdlib=libc++",
                //"test.cpp",这里是官方写法，不具有普遍性，注意两个配置文件的统一性即可
                "${fileBasenameNoExtension}.cpp",
                "-o",
                //"test.out",
                "build/${fileBasenameNoExtension}",
                "--debug"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            }
        }
    ]
}